import { useLoader, Canvas, useFrame } from "react-three-fiber"
import { GLTFLoader } from "three/examples/jsm/loaders/GLTFLoader"
import ReactDOM from 'react-dom'
import React, { Suspense, useState, useRef } from 'react'
import { OrbitControls, Box } from 'drei'
import { useGLTF } from '@react-three/drei/useGLTF'
import { VRCanvas, DefaultXRControllers, Hover, Select } from 'react-xr'
import { Physics, useSphere, useBox } from 'use-cannon'
// import Chessboard from './Chessboard'
import './styles.css'

function Env() {
  const args = [5, 1, 5]
  const [ref] = useBox(() => ({
    args,
    mass: 0
  }))

  return (
    <Box ref={ref} args={args}>
      <meshStandardMaterial color="#666" attach="material" />
    </Box>
  )
}

/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/
function Chessboard(props) {
  const group = useRef(() => ({ args: 0.2, mass: 1 }))
  const { nodes, materials } = useGLTF('/chessboard/chessboardCentered.gltf')
  return (
    <group ref={group} {...props} dispose={null} position={[0, 1.40, -0.54]}>
      <mesh material={materials.BlocksPaper} geometry={nodes['node_MeshObject1316465664-PolyPaper21'].geometry} />
    </group>
  )
}

function Knight(props) {
  const group = useRef(() => ({ args: 0.2, mass: 1 }))
  const { nodes, materials } = useGLTF('/knight/chessKnight.gltf')
  return (
    <group ref={group} {...props} dispose={null} scale={[0.5, 0.5, 0.5]}>
      <mesh material={materials.BlocksPaper} geometry={nodes['node_MeshObject-1328424064-PolyPaper23'].geometry} />
    </group>
  )
}

const App = () => {
  // const [isHovered, setIsHovered] = useState(false)
  // const color = isHovered ? 'blue' : '#e23'

  return (
    <VRCanvas colorManagement>
      <fog args={['#000', 2, 20]} attach="fog" />
      <Physics
        gravity={[0, -6, 0]}
        iterations={20}
        tolerance={0.0001}
        defaultContactMaterial={{
          friction: 0.003
        }}>
      <ambientLight />
      <spotLight />

      <OrbitControls />

      {/* <Hover onChange={setIsHovered}>
        <Box position={[0, 0.8, -1]} scale={[0.3, 0.3, 0.3]}>
          <meshStandardMaterial color={color} />
        </Box>
      </Hover> */}

      {/* <Physics gravity={[0, -26, 0]} defaultContactMaterial={{ restitution: 0.6 }}> */}
        {/* {balls.map((props) => (<Ball {...props} />))} */}
        <Suspense fallback={null}>
          <Select onSelect={() => console.log('mesh has been selected')}>
            <Knight position={[-0.28, 1.54, -0.82]} rotation={[0, -Math.PI / 2, 0]}/>
            <Knight position={[-0.20, 1.54, -0.82]} rotation={[0, -Math.PI / 2, 0]}/>
            <Knight position={[-0.12, 1.54, -0.82]} rotation={[0, -Math.PI / 2, 0]}/>
            <Knight position={[-0.04, 1.54, -0.82]} rotation={[0, -Math.PI / 2, 0]}/>
            <Knight position={[0.04, 1.54, -0.82]} rotation={[0, -Math.PI / 2, 0]}/>
            <Knight position={[0.12, 1.54, -0.82]} rotation={[0, -Math.PI / 2, 0]}/>
            <Knight position={[0.20, 1.54, -0.82]} rotation={[0, -Math.PI / 2, 0]}/>
            <Knight position={[0.28, 1.54, -0.82]} rotation={[0, -Math.PI / 2, 0]}/>

            <Knight position={[-0.28, 1.54, -0.74]} rotation={[0, -Math.PI / 2, 0]}/>
            <Knight position={[-0.20, 1.54, -0.74]} rotation={[0, -Math.PI / 2, 0]}/>
            <Knight position={[-0.12, 1.54, -0.74]} rotation={[0, -Math.PI / 2, 0]}/>
            <Knight position={[-0.04, 1.54, -0.74]} rotation={[0, -Math.PI / 2, 0]}/>
            <Knight position={[0.04, 1.54, -0.74]} rotation={[0, -Math.PI / 2, 0]}/>
            <Knight position={[0.12, 1.54, -0.74]} rotation={[0, -Math.PI / 2, 0]}/>
            <Knight position={[0.20, 1.54, -0.74]} rotation={[0, -Math.PI / 2, 0]}/>
            <Knight position={[0.28, 1.54, -0.74]} rotation={[0, -Math.PI / 2, 0]}/>

            <Knight position={[-0.28, 1.54, -0.26]} rotation={[0, Math.PI / 2, 0]}/>
            <Knight position={[-0.20, 1.54, -0.26]} rotation={[0, Math.PI / 2, 0]}/>
            <Knight position={[-0.12, 1.54, -0.26]} rotation={[0, Math.PI / 2, 0]}/>
            <Knight position={[-0.04, 1.54, -0.26]} rotation={[0, Math.PI / 2, 0]}/>
            <Knight position={[0.04, 1.54, -0.26]} rotation={[0, Math.PI / 2, 0]}/>
            <Knight position={[0.12, 1.54, -0.26]} rotation={[0, Math.PI / 2, 0]}/>
            <Knight position={[0.20, 1.54, -0.26]} rotation={[0, Math.PI / 2, 0]}/>
            <Knight position={[0.28, 1.54, -0.26]} rotation={[0, Math.PI / 2, 0]}/>

            <Knight position={[-0.28, 1.54, -0.34]} rotation={[0, Math.PI / 2, 0]}/>
            <Knight position={[-0.20, 1.54, -0.34]} rotation={[0, Math.PI / 2, 0]}/>
            <Knight position={[-0.12, 1.54, -0.34]} rotation={[0, Math.PI / 2, 0]}/>
            <Knight position={[-0.04, 1.54, -0.34]} rotation={[0, Math.PI / 2, 0]}/>
            <Knight position={[0.04, 1.54, -0.34]} rotation={[0, Math.PI / 2, 0]}/>
            <Knight position={[0.12, 1.54, -0.34]} rotation={[0, Math.PI / 2, 0]}/>
            <Knight position={[0.20, 1.54, -0.34]} rotation={[0, Math.PI / 2, 0]}/>
            <Knight position={[0.28, 1.54, -0.34]} rotation={[0, Math.PI / 2, 0]}/>
          </Select>
          <Chessboard />
        </Suspense>
        <Env />
      <DefaultXRControllers />
      </Physics>
    </VRCanvas>
  )
}

ReactDOM.render(<App />, document.getElementById('root'))
